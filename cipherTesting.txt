
try {

    Certificate cert1 = ks.getCertificate("server");
    PublicKey pubKeyServer = Crypto.getPublicKeyFromCertificate(cert1);

    String domain = "";
    String password = "";
    for(int i=0; i < 300; i++){
        domain+= "D";
        password+= "P";
    }

    String user = "Belly";

    PrivateKey privateKey = Crypto.getPrivateKeyFromKeystore(ks, "client", "insecure");
    byte[] hashDomain = Crypto.hashString(domain);
    System.out.println(hashDomain.length);
    byte[] hashUsername = Crypto.hashString(user);
    byte[] hashPassword = Crypto.hashString(password);

    byte[] cipheredPassword = Crypto.cipherString(password, pubKey);

    Timestamp timestamp = new Timestamp(System.currentTimeMillis());
    String stringTS = timestamp.toString();

    byte[] cipheredDomain = Crypto.cipherString(new String(hashDomain), pubKeyServer);
    byte[] cipheredUsername = Crypto.cipherString(new String(hashUsername), pubKeyServer);

    String StringCipheredDomain = Crypto.encode(cipheredDomain);
    String StringCipheredUsername = Crypto.encode(cipheredUsername);
    String StringCipheredPassword = Crypto.encode(cipheredPassword);

    String headerHashPassword = Crypto.encode(hashPassword);
    // _______________
    String stringHashDomain = new String(hashDomain);
    String stringHashUsername = new String(hashUsername);
    String stringHashPassword = new String(hashPassword);
    String stringcipheredPassword = new String(cipheredPassword);

    String tosign = stringHashDomain + stringHashUsername + stringHashPassword + stringcipheredPassword
        + stringTS;

    String sig = Crypto.encode(Crypto.makeDigitalSignature(tosign.getBytes(), privateKey));
    // ________________
    /*
     * sig pubKey stringTS stringHashPassword
     * 
     * StringCipheredDomain StringCipheredUsername
     * 
     * StringCipheredPassword
     * 
     */
    KeyStore ksServ = Crypto.readKeystoreFile("../PwServer/ks/Server1.jks", "insecure".toCharArray());
    PrivateKey privateServer = Crypto.getPrivateKeyFromKeystore(ksServ, "server", "insecure");

    // Verificar fresh
    Crypto.validTS(stringTS);

    // Decifrar
    String serverSideStringHashDomain = Crypto.decipherString(Crypto.decode(StringCipheredDomain),
            privateServer);
    String serverSideStringHashUsername = Crypto.decipherString(Crypto.decode(StringCipheredUsername),
            privateServer);

    // Verificar sig
    byte[] serverSideHashPassword = Crypto.decode(headerHashPassword);
    String serverSideStringHashPassword = new String(serverSideHashPassword);
    String serverSideStringcipheredPassword = new String(Crypto.decode(StringCipheredPassword));

    String serverSideTosign = serverSideStringHashDomain + serverSideStringHashUsername
        + serverSideStringHashPassword + serverSideStringcipheredPassword + stringTS;

    byte[] serverSideSig = Crypto.decode(sig);

    System.out.println(Crypto.verifyDigitalSignature(serverSideSig, serverSideTosign.getBytes(), pubKey));

} catch (NoSuchAlgorithmException e) {
    e.printStackTrace();
} catch (Exception e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
}
